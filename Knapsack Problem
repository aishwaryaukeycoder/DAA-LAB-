#include <stdio.h>

// Function to return the maximum of two numbers
int max(int a, int b) {
    return (a > b) ? a : b;
}

// Function to solve 0/1 Knapsack problem using Dynamic Programming
int knapSack(int W, int wt[], int val[], int N) {
    int dp[N + 1][W + 1];

    // Build table dp[][] in bottom-up manner
    for (int i = 0; i <= N; i++) {
        for (int w = 0; w <= W; w++) {
            if (i == 0 || w == 0)
                dp[i][w] = 0; // base case
            else if (wt[i - 1] <= w)
                dp[i][w] = max(val[i - 1] + dp[i - 1][w - wt[i - 1]], 
                               dp[i - 1][w]);
            else
                dp[i][w] = dp[i - 1][w];
        }
    }

    return dp[N][W]; // Maximum value in knapsack of capacity W
}

int main() {
    int N, W;

    // Input number of items
    scanf("%d", &N);

    int val[N], wt[N];

    // Input values array
    for (int i = 0; i < N; i++)
        scanf("%d", &val[i]);

    // Input weights array
    for (int i = 0; i < N; i++)
        scanf("%d", &wt[i]);

    // Input knapsack capacity
    scanf("%d", &W);

    // Output maximum value
    printf("%d\n", knapSack(W, wt, val, N));

    return 0;
}
